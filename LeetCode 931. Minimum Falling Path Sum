class Solution {
    public int minFallingPathSum(int[][] matrix) {
        int maxi=(int) Math.pow(10,9);
        int[][]dp=new int[matrix.length][matrix[0].length];
        for(int i=0;i<matrix.length;i++){
            for(int j=0;j<matrix[0].length;j++){
                dp[i][j]=-1;
            }
        }
            
       
        for(int j=0;j<matrix[0].length;j++){
            int res=f(matrix,matrix.length-1,j,dp);
            maxi=Math.min(maxi,res);
        }
        return maxi;
        
    }
    public static int f(int[][] matrix,int r,int c,int[][] dp){
        if(c<0 || c>=matrix[0].length){
            return (int)Math.pow(10,9);
        }
        if(r==0){
            return matrix[0][c];
        }
        if(dp[r][c]!=-1){
            return dp[r][c];
        }
        int up=matrix[r][c]+f(matrix,r-1,c,dp); 
        int dul=matrix[r][c]+f(matrix,r-1,c-1,dp); 
        int dur=matrix[r][c]+f(matrix,r-1,c+1,dp); 
        return dp[r][c]=Math.min(up,Math.min(dul,dur));
    }
}
